# Docking with large dataset MOFs and small amino acid
# the scripts that are useful for me:
  Gold_multi_queue1.py and Gold_multi_map.py
 (1) for Gold_multi_queue1.py
This script demonstrates how to use the CSD Docking API and the standard multiprocessing module to parallelize GOLD docking.
It uses a multiprocessing job queue and a set of worker processes to dock ligands from the input file individually.
The API 'interactive' docking mode is used, which starts a special GOLD process in the background and communicates with it via a socket.
GOLD running in this mode doesn't produce the same output as it would normally. Thus, output is written explicitly by the script.
(I search for Chatgpt, and it told me the output is depended on the Gold_conf, but I didn't find it :( )

# the input file:
10 samples 3D_MOF_subset (receptor), glycine structure.mol2 (ligand), gold.conf
# --n_processes (optional): Number of parallel processes to use (default is 6). (I chose the default setting)

# Features of this script:
1. Parallel docking of ligand molecules using the CSD Docking API.
2. Uses multiprocessing job queue for efficient task distribution.
3. Interactive docking mode for real-time communication with GOLD process.
4. Compilation of docking results into a single output directory.
5. Generation of a combined bestranking.lst file.



 (2) for Gold_multi_map.py
the function is the same as (1)
It partitions the input ligand file into chunks and uses the multiprocessing `map` feature to dock these chunks in parallel.
default API docking mode is used, which runs GOLD as a subprocess.
All output is written exactly as if GOLD were to be run via Hermes or the command line.
The solution files for the chunks are copied to the main output directory, and the full `bestranking.lst` file is compiled from the partial chunk versions.

# Features:
1. Parallel docking of ligand molecules using the CSD Docking API.
2. Automatic partitioning of input ligand file into chunks.
3. Compilation of docking results into a single output directory.
4. Generation of a combined bestranking.lst file.
